// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/images.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageStorage is a mock of ImageStorage interface.
type MockImageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageStorageMockRecorder
}

// MockImageStorageMockRecorder is the mock recorder for MockImageStorage.
type MockImageStorageMockRecorder struct {
	mock *MockImageStorage
}

// NewMockImageStorage creates a new mock instance.
func NewMockImageStorage(ctrl *gomock.Controller) *MockImageStorage {
	mock := &MockImageStorage{ctrl: ctrl}
	mock.recorder = &MockImageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStorage) EXPECT() *MockImageStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockImageStorage) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockImageStorageMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockImageStorage)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockImageStorage) Get(ctx context.Context, path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageStorageMockRecorder) Get(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageStorage)(nil).Get), ctx, path)
}

// Save mocks base method.
func (m *MockImageStorage) Save(ctx context.Context, bucket string, f io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, bucket, f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockImageStorageMockRecorder) Save(ctx, bucket, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockImageStorage)(nil).Save), ctx, bucket, f)
}
