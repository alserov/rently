// Status generated by MockGen. DO NOT EDIT.
// Source: proto/gen/file-storage/file-storage_grpc.pb.go

// Package clientmocks is a generated GoMock package.
package clientmocks

import (
	context "context"
	reflect "reflect"

	file_storage "github.com/alserov/rently/proto/gen/file-storage"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileStorageClient is a mock of FileStorageClient interface.
type MockFileStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageClientMockRecorder
}

// MockFileStorageClientMockRecorder is the mock recorder for MockFileStorageClient.
type MockFileStorageClientMockRecorder struct {
	mock *MockFileStorageClient
}

// NewMockFileStorageClient creates a new mock instance.
func NewMockFileStorageClient(ctrl *gomock.Controller) *MockFileStorageClient {
	mock := &MockFileStorageClient{ctrl: ctrl}
	mock.recorder = &MockFileStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageClient) EXPECT() *MockFileStorageClientMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockFileStorageClient) GetImage(ctx context.Context, in *file_storage.GetImageReq, opts ...grpc.CallOption) (*file_storage.GetImageRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetImage", varargs...)
	ret0, _ := ret[0].(*file_storage.GetImageRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockFileStorageClientMockRecorder) GetImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockFileStorageClient)(nil).GetImage), varargs...)
}

// GetLinks mocks base method.
func (m *MockFileStorageClient) GetLinks(ctx context.Context, in *file_storage.GetLinksReq, opts ...grpc.CallOption) (*file_storage.GetLinksRes, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLinks", varargs...)
	ret0, _ := ret[0].(*file_storage.GetLinksRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockFileStorageClientMockRecorder) GetLinks(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockFileStorageClient)(nil).GetLinks), varargs...)
}

// MockFileStorageServer is a mock of FileStorageServer interface.
type MockFileStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageServerMockRecorder
}

// MockFileStorageServerMockRecorder is the mock recorder for MockFileStorageServer.
type MockFileStorageServerMockRecorder struct {
	mock *MockFileStorageServer
}

// NewMockFileStorageServer creates a new mock instance.
func NewMockFileStorageServer(ctrl *gomock.Controller) *MockFileStorageServer {
	mock := &MockFileStorageServer{ctrl: ctrl}
	mock.recorder = &MockFileStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageServer) EXPECT() *MockFileStorageServerMockRecorder {
	return m.recorder
}

// GetImage mocks base method.
func (m *MockFileStorageServer) GetImage(arg0 context.Context, arg1 *file_storage.GetImageReq) (*file_storage.GetImageRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", arg0, arg1)
	ret0, _ := ret[0].(*file_storage.GetImageRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockFileStorageServerMockRecorder) GetImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockFileStorageServer)(nil).GetImage), arg0, arg1)
}

// GetLinks mocks base method.
func (m *MockFileStorageServer) GetLinks(arg0 context.Context, arg1 *file_storage.GetLinksReq) (*file_storage.GetLinksRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", arg0, arg1)
	ret0, _ := ret[0].(*file_storage.GetLinksRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockFileStorageServerMockRecorder) GetLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockFileStorageServer)(nil).GetLinks), arg0, arg1)
}

// mustEmbedUnimplementedFileStorageServer mocks base method.
func (m *MockFileStorageServer) mustEmbedUnimplementedFileStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileStorageServer")
}

// mustEmbedUnimplementedFileStorageServer indicates an expected call of mustEmbedUnimplementedFileStorageServer.
func (mr *MockFileStorageServerMockRecorder) mustEmbedUnimplementedFileStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileStorageServer", reflect.TypeOf((*MockFileStorageServer)(nil).mustEmbedUnimplementedFileStorageServer))
}

// MockUnsafeFileStorageServer is a mock of UnsafeFileStorageServer interface.
type MockUnsafeFileStorageServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileStorageServerMockRecorder
}

// MockUnsafeFileStorageServerMockRecorder is the mock recorder for MockUnsafeFileStorageServer.
type MockUnsafeFileStorageServerMockRecorder struct {
	mock *MockUnsafeFileStorageServer
}

// NewMockUnsafeFileStorageServer creates a new mock instance.
func NewMockUnsafeFileStorageServer(ctrl *gomock.Controller) *MockUnsafeFileStorageServer {
	mock := &MockUnsafeFileStorageServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileStorageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileStorageServer) EXPECT() *MockUnsafeFileStorageServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileStorageServer mocks base method.
func (m *MockUnsafeFileStorageServer) mustEmbedUnimplementedFileStorageServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileStorageServer")
}

// mustEmbedUnimplementedFileStorageServer indicates an expected call of mustEmbedUnimplementedFileStorageServer.
func (mr *MockUnsafeFileStorageServerMockRecorder) mustEmbedUnimplementedFileStorageServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileStorageServer", reflect.TypeOf((*MockUnsafeFileStorageServer)(nil).mustEmbedUnimplementedFileStorageServer))
}
