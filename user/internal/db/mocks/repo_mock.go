// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repository.go

// Package repomock is a generated GoMock package.
package repomock

import (
	context "context"
	reflect "reflect"

	db "github.com/alserov/rently/user/internal/db"
	models "github.com/alserov/rently/user/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetInfoForRent mocks base method.
func (m *MockRepository) GetInfoForRent(ctx context.Context, uuid string) (models.InfoForRentRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoForRent", ctx, uuid)
	ret0, _ := ret[0].(models.InfoForRentRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoForRent indicates an expected call of GetInfoForRent.
func (mr *MockRepositoryMockRecorder) GetInfoForRent(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoForRent", reflect.TypeOf((*MockRepository)(nil).GetInfoForRent), ctx, uuid)
}

// GetUserInfo mocks base method.
func (m *MockRepository) GetUserInfo(ctx context.Context, uuid string) (models.UserInfoRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, uuid)
	ret0, _ := ret[0].(models.UserInfoRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockRepositoryMockRecorder) GetUserInfo(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockRepository)(nil).GetUserInfo), ctx, uuid)
}

// Login mocks base method.
func (m *MockRepository) Login(ctx context.Context, email string) (db.LoginInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, email)
	ret0, _ := ret[0].(db.LoginInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryMockRecorder) Login(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepository)(nil).Login), ctx, email)
}

// Register mocks base method.
func (m *MockRepository) Register(ctx context.Context, req models.RegisterReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockRepositoryMockRecorder) Register(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepository)(nil).Register), ctx, req)
}

// SwitchNotificationsStatus mocks base method.
func (m *MockRepository) SwitchNotificationsStatus(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchNotificationsStatus", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchNotificationsStatus indicates an expected call of SwitchNotificationsStatus.
func (mr *MockRepositoryMockRecorder) SwitchNotificationsStatus(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchNotificationsStatus", reflect.TypeOf((*MockRepository)(nil).SwitchNotificationsStatus), ctx, uuid)
}
