// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: carsharing/carsharing.proto

package carsharing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarsClient is the client API for Cars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsClient interface {
	CreateRent(ctx context.Context, in *CreateRentReq, opts ...grpc.CallOption) (*CreateRentRes, error)
	CancelRent(ctx context.Context, in *CancelRentReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckRent(ctx context.Context, in *CheckRentReq, opts ...grpc.CallOption) (*CheckRentRes, error)
	GetRentStartingOnDate(ctx context.Context, in *GetRentStartingOnDateReq, opts ...grpc.CallOption) (*GetRentStartingOnDateRes, error)
	GetAvailableCars(ctx context.Context, in *GetAvailableCarsReq, opts ...grpc.CallOption) (*GetCarsRes, error)
	GetCarsByParams(ctx context.Context, in *GetCarsByParamsReq, opts ...grpc.CallOption) (*GetCarsRes, error)
	GetCarByUUID(ctx context.Context, in *GetCarByUUIDReq, opts ...grpc.CallOption) (*Car, error)
	GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*GetImageRes, error)
	CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCarPrice(ctx context.Context, in *UpdateCarPriceReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type carsClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsClient(cc grpc.ClientConnInterface) CarsClient {
	return &carsClient{cc}
}

func (c *carsClient) CreateRent(ctx context.Context, in *CreateRentReq, opts ...grpc.CallOption) (*CreateRentRes, error) {
	out := new(CreateRentRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/CreateRent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) CancelRent(ctx context.Context, in *CancelRentReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/CancelRent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) CheckRent(ctx context.Context, in *CheckRentReq, opts ...grpc.CallOption) (*CheckRentRes, error) {
	out := new(CheckRentRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/CheckRent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetRentStartingOnDate(ctx context.Context, in *GetRentStartingOnDateReq, opts ...grpc.CallOption) (*GetRentStartingOnDateRes, error) {
	out := new(GetRentStartingOnDateRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/GetRentStartingOnDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetAvailableCars(ctx context.Context, in *GetAvailableCarsReq, opts ...grpc.CallOption) (*GetCarsRes, error) {
	out := new(GetCarsRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/GetAvailableCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetCarsByParams(ctx context.Context, in *GetCarsByParamsReq, opts ...grpc.CallOption) (*GetCarsRes, error) {
	out := new(GetCarsRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/GetCarsByParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetCarByUUID(ctx context.Context, in *GetCarByUUIDReq, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/GetCarByUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetImage(ctx context.Context, in *GetImageReq, opts ...grpc.CallOption) (*GetImageRes, error) {
	out := new(GetImageRes)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) CreateCar(ctx context.Context, in *CreateCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) DeleteCar(ctx context.Context, in *DeleteCarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/DeleteCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) UpdateCarPrice(ctx context.Context, in *UpdateCarPriceReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/carsharing.Cars/UpdateCarPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsServer is the server API for Cars service.
// All implementations must embed UnimplementedCarsServer
// for forward compatibility
type CarsServer interface {
	CreateRent(context.Context, *CreateRentReq) (*CreateRentRes, error)
	CancelRent(context.Context, *CancelRentReq) (*emptypb.Empty, error)
	CheckRent(context.Context, *CheckRentReq) (*CheckRentRes, error)
	GetRentStartingOnDate(context.Context, *GetRentStartingOnDateReq) (*GetRentStartingOnDateRes, error)
	GetAvailableCars(context.Context, *GetAvailableCarsReq) (*GetCarsRes, error)
	GetCarsByParams(context.Context, *GetCarsByParamsReq) (*GetCarsRes, error)
	GetCarByUUID(context.Context, *GetCarByUUIDReq) (*Car, error)
	GetImage(context.Context, *GetImageReq) (*GetImageRes, error)
	CreateCar(context.Context, *CreateCarReq) (*emptypb.Empty, error)
	DeleteCar(context.Context, *DeleteCarReq) (*emptypb.Empty, error)
	UpdateCarPrice(context.Context, *UpdateCarPriceReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedCarsServer()
}

// UnimplementedCarsServer must be embedded to have forward compatible implementations.
type UnimplementedCarsServer struct {
}

func (UnimplementedCarsServer) CreateRent(context.Context, *CreateRentReq) (*CreateRentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRent not implemented")
}
func (UnimplementedCarsServer) CancelRent(context.Context, *CancelRentReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRent not implemented")
}
func (UnimplementedCarsServer) CheckRent(context.Context, *CheckRentReq) (*CheckRentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRent not implemented")
}
func (UnimplementedCarsServer) GetRentStartingOnDate(context.Context, *GetRentStartingOnDateReq) (*GetRentStartingOnDateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRentStartingOnDate not implemented")
}
func (UnimplementedCarsServer) GetAvailableCars(context.Context, *GetAvailableCarsReq) (*GetCarsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableCars not implemented")
}
func (UnimplementedCarsServer) GetCarsByParams(context.Context, *GetCarsByParamsReq) (*GetCarsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarsByParams not implemented")
}
func (UnimplementedCarsServer) GetCarByUUID(context.Context, *GetCarByUUIDReq) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarByUUID not implemented")
}
func (UnimplementedCarsServer) GetImage(context.Context, *GetImageReq) (*GetImageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedCarsServer) CreateCar(context.Context, *CreateCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarsServer) DeleteCar(context.Context, *DeleteCarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarsServer) UpdateCarPrice(context.Context, *UpdateCarPriceReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarPrice not implemented")
}
func (UnimplementedCarsServer) mustEmbedUnimplementedCarsServer() {}

// UnsafeCarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsServer will
// result in compilation errors.
type UnsafeCarsServer interface {
	mustEmbedUnimplementedCarsServer()
}

func RegisterCarsServer(s grpc.ServiceRegistrar, srv CarsServer) {
	s.RegisterService(&Cars_ServiceDesc, srv)
}

func _Cars_CreateRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CreateRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/CreateRent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CreateRent(ctx, req.(*CreateRentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_CancelRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CancelRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/CancelRent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CancelRent(ctx, req.(*CancelRentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_CheckRent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CheckRent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/CheckRent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CheckRent(ctx, req.(*CheckRentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetRentStartingOnDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentStartingOnDateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetRentStartingOnDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/GetRentStartingOnDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetRentStartingOnDate(ctx, req.(*GetRentStartingOnDateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetAvailableCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableCarsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetAvailableCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/GetAvailableCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetAvailableCars(ctx, req.(*GetAvailableCarsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetCarsByParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsByParamsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetCarsByParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/GetCarsByParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetCarsByParams(ctx, req.(*GetCarsByParamsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetCarByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarByUUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetCarByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/GetCarByUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetCarByUUID(ctx, req.(*GetCarByUUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetImage(ctx, req.(*GetImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CreateCar(ctx, req.(*CreateCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/DeleteCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).DeleteCar(ctx, req.(*DeleteCarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_UpdateCarPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).UpdateCarPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsharing.Cars/UpdateCarPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).UpdateCarPrice(ctx, req.(*UpdateCarPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cars_ServiceDesc is the grpc.ServiceDesc for Cars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "carsharing.Cars",
	HandlerType: (*CarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRent",
			Handler:    _Cars_CreateRent_Handler,
		},
		{
			MethodName: "CancelRent",
			Handler:    _Cars_CancelRent_Handler,
		},
		{
			MethodName: "CheckRent",
			Handler:    _Cars_CheckRent_Handler,
		},
		{
			MethodName: "GetRentStartingOnDate",
			Handler:    _Cars_GetRentStartingOnDate_Handler,
		},
		{
			MethodName: "GetAvailableCars",
			Handler:    _Cars_GetAvailableCars_Handler,
		},
		{
			MethodName: "GetCarsByParams",
			Handler:    _Cars_GetCarsByParams_Handler,
		},
		{
			MethodName: "GetCarByUUID",
			Handler:    _Cars_GetCarByUUID_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _Cars_GetImage_Handler,
		},
		{
			MethodName: "CreateCar",
			Handler:    _Cars_CreateCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Cars_DeleteCar_Handler,
		},
		{
			MethodName: "UpdateCarPrice",
			Handler:    _Cars_UpdateCarPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "carsharing/carsharing.proto",
}
